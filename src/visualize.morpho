/* Visualizer Class for Multi Tactoid Simulations */

import plot
import moviemaker
import povray

class TactoidVisualizer {
    init(MultiDirector sim) {
        self.sim = sim
    }

    visualizeDirectorSize() {
      var ll = Length().integrand(self.sim.mesh)
      return ll.sum()/ll.count()/6
    }

    visualizeMesh(grade = nil, sel=nil) {
        var g = [2]
        if (grade) g = grade
        if (isnil(sel)) sel = self.sim.mesh.shell
        if (!islist(g)) g = [ g ]
        return plotmesh(self.sim.mesh, selection = sel, grade=g)
    }

    visualizeDirector(color = nil) {
      var col = color
      if (isnil(color)) col = White
      var dl = self.visualizeDirectorSize()
      var g = Graphics()
      for (id in 0...self.sim.mesh.count()) {
        var x = self.sim.mesh.vertexposition(id)
        var nn = self.sim.director[0,id]
        g.display(Cylinder(x-nn*dl, x+nn*dl, aspectratio=0.3, color = col))
      }
      return g
    }

    _visualizeFieldOnSelection(Selection selection, field, color) {
        var selVertices = selection.idlistforgrade(0)
        var dl = self.visualizeDirectorSize()
        var g = Graphics()
        for (id in 0...selection.count(0)) {
            var x = self.sim.mesh.vertexposition(selVertices[id])
            var xx = Matrix([x[0],x[1],x[2]])
            var dx = field[0, selVertices[id]]
            var dxx = Matrix([dx[0],dx[1], dx[2]])
            g.display(Cylinder(xx - dl*dxx, xx + dl*dxx, aspectratio = 0.3, color = color))
        }
        return g
    }

    visualizeShell(grade = nil) {
        var g = [2]
        var map = GrayMap()
        var rgb = map.rgb(0.025)
        var col = Color(rgb[0], rgb[1], rgb[2])
        if (grade) g = grade
        if (!islist(g)) g = [ g ]
            return plotmesh(self.sim.mesh, selection = self.sim.shell, grade=g, color = col, filter=0.25)
    }

    visualizeHalfDomain(grade = nil) {
        var g = [2]
        var map = GrayMap()
        var rgb = map.rgb(0.025)
        var col = Color(rgb[0], rgb[1], rgb[2])
        var half = Selection(self.sim.mesh, fn(x,y,z) z<0)
        half.addgrade(1)
        half.addgrade(2)
        if (grade) g = grade
        if (!islist(g)) g = [ g ]
            return plotmesh(self.sim.mesh, selection = half, grade=g, color = col)
    }

    visualizeExteriorField(col = nil) {
        if (isnil(col)) col = White
        self.half = Selection(self.sim.mesh, fn (x,y,z) z < 0)
        self.sel = Selection(self.sim.mesh)
        for (id in self.half.idlistforgrade(0)) self.sel[0,id] = true
        for (id in self.sim.shell.idlistforgrade(0)) self.sel[0,id] = false
        var g = self._visualizeFieldOnSelection(self.sel, self.sim.nExterior, col)
        return g
    }

    visualizeTactoid(col = nil) {
        if (isnil(col)) col = White
        var g0 = self.visualizeShell()
        var g1 = self._visualizeFieldOnSelection(self.sim.shell, self.sim.nInterior, col)
        return g0 + g1
    }

    visualizeHalfTactoid(col = nil) {
        if (isnil(col)) col = White
        var half = Selection(self.sim.mesh, fn (x,y,z) z < 0)
        var halftactoid = half.intersection(self.sim.shell)
        var g1 = self._visualizeFieldOnSelection(halftactoid, self.sim.nInterior, col)
        return g1
    }

    visualize(col=nil) {
        if (isnil(col)) col = White
        var g0 = self.visualizeShell()
        var g1 = self._visualizeFieldOnSelection(self.sim.shell, self.sim.nInterior, col)
        var g2 = self.visualizeExteriorField()
        return g0 + g1 + g2
    }

    visualizeHalf(col=nil) {
        if (isnil(col)) col = White
        var g0 = self.visualizeHalfDomain()
        var g1 = self.visualizeHalfTactoid()
        var g2 = self.visualizeExteriorField()
        return g0 + g1 + g2
    }

    tracer(Graphics g, String file_name) {
        print "--------------------\t Tracing Figure " + file_name
        var fig = g
        var pov = POVRaytracer(fig)
        pov.viewangle = 150
        pov.light = [Matrix([3,3,10]), Matrix([-3,3,10]), Matrix([0,-3,10])]
        pov.render(file_name, quiet = true, display=true, transparent=true)
    }

    tracerTactoid(String file_name) {
        print "--------------------\t Tracing Figure " + file_name
        var fig = self.visualizeTactoid()
        var cam = Camera()
        cam.viewpoint = 5*Matrix([1,2,0])
        cam.sky = Matrix([1,0,0])
        var pov = POVRaytracer(fig)
        pov.viewangle = 50
        pov.light = [cam.viewpoint, cam.viewpoint+Matrix([3,3,10]), cam.viewpoint-Matrix([3,3,10])]
        pov.render(file_name, quiet = true, display=true, transparent=false)
    }

    tracerLandscape(String file_name) {
        print "--------------------\t Tracing Figure " + file_name
        var fig = self.visualize()
        var cam = Camera()
        cam.viewpoint = 5*Matrix([1,2,0])
        cam.sky = Matrix([1,0,0])
        var pov = POVRaytracer(fig)
        pov.viewangle = 100
        pov.light = [cam.viewpoint, cam.viewpoint+Matrix([3,3,10]), cam.viewpoint-Matrix([3,3,10])]
        pov.render(file_name, quiet = true, display=true, transparent=false)
    }

    tracerLandscapeCloseUp(String file_name) {
        print "--------------------\t Tracing Figure " + file_name
        var fig = self.visualize()
        var cam = Camera()
        cam.viewpoint = 5*Matrix([1,2,0])
        cam.sky = Matrix([1,0,0])
        var pov = POVRaytracer(fig)
        pov.viewangle = 60
        pov.light = [cam.viewpoint, cam.viewpoint+Matrix([3,3,10]), cam.viewpoint-Matrix([3,3,10])]
        pov.render(file_name, quiet = true, display=true, transparent=false)
    }

    createMovie(String fname, Graphics g) {
        print "--------------------\t Generating Movie (...please wait...) -----"
        var movie = MovieMaker(fname, framerate=10)
        for (phi in 0..2*Pi:Pi/20) {
            var cam = Camera(viewpoint = Matrix([4*sin(phi), 4, 4*cos(phi)]))
            var l = [Matrix([0,0,10]), Matrix([0,0,10]), Matrix([0,0,10])]
            cam.sky = Matrix([0,1,0])
            movie.frame(g, camera = cam,lights=l)
        }
        movie.make()
        movie.clean()
    }
}
